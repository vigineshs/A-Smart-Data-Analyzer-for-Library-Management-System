package CS203JavaDemoApp;

import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.net.*;
import CSLibrary.Net.*;
import CSLibrary.Net.Constants.*;
import CSLibrary.Net.Structures.*;
import CSLibrary.Net.Events.*;
import CSLibrary.Message.*;

/**
 *
 * @author gene.yeung
 */
public class NetFinderFrame extends javax.swing.JFrame implements DeviceFoundEventListener, AssignResultEventListener, UpdateResultEventListener, UpdatePercentEventListener{

    // <editor-fold defaultstate="collapsed" desc="Variable">
    private String Info_Search = "Press \"Search\" button to search all CS203 in the same subnet.";
    private String Info_Connect = "Press \"Connect\" or \"Assignment\" or other buttons.";
    private String Info_Select = "Select any CS203 device on the list.";
    private boolean m_start = false;
    private DefaultListModel deviceListModel;
    private UpdateProgressDialog progressDialog = null;

    public static DeviceInfomation selectedDeviceInfo = new DeviceInfomation();
    public static boolean AssignOK = false;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Init">
    /** Creates new form NetFinderFrame */
    public NetFinderFrame() {
        initComponents();

        //Center the dialog
        Dimension size = getSize();
        setLocation((Main.screen.width - size.width)/2, (Main.screen.height - size.height)/2);

        lbl_info.setText(Info_Search);
        deviceListModel = (DefaultListModel)list_device.getModel();
        progressDialog = new UpdateProgressDialog(null, true);

        Main.netfinder = new NetFinder();

        AttachCallback(true);

        this.setIconImage(new ImageIcon("CSL Logo.jpg").getImage());
    }
    // </editor-fold>

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_connect = new javax.swing.JButton();
        btn_assignment = new javax.swing.JButton();
        btn_image = new javax.swing.JButton();
        btn_bootloader = new javax.swing.JButton();
        lbl_info = new javax.swing.JLabel();
        btn_clear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_device = new javax.swing.JList();
        btn_start = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search Device");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btn_connect.setBackground(java.awt.Color.cyan);
        btn_connect.setText("Connect");
        btn_connect.setEnabled(false);
        btn_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectActionPerformed(evt);
            }
        });

        btn_assignment.setBackground(java.awt.Color.pink);
        btn_assignment.setText("Assignment");
        btn_assignment.setEnabled(false);
        btn_assignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_assignmentActionPerformed(evt);
            }
        });

        btn_image.setBackground(java.awt.Color.pink);
        btn_image.setText("Image");
        btn_image.setEnabled(false);
        btn_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_imageActionPerformed(evt);
            }
        });

        btn_bootloader.setBackground(java.awt.Color.pink);
        btn_bootloader.setText("Bootloader");
        btn_bootloader.setEnabled(false);
        btn_bootloader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bootloaderActionPerformed(evt);
            }
        });

        lbl_info.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbl_info.setForeground(java.awt.Color.blue);
        lbl_info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_info.setText("Select any CS203 device on the list");

        btn_clear.setBackground(java.awt.Color.orange);
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        list_device.setModel(new DefaultListModel());
        list_device.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_device.setCellRenderer(new ListRenderer());
        list_device.setFixedCellHeight(65);
        list_device.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_deviceValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_device);

        btn_start.setBackground(java.awt.Color.green);
        btn_start.setText("Search");
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_assignment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_image, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_bootloader)
                        .addGap(18, 18, 18)
                        .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_info, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 437, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lbl_info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_start, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_assignment, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_image, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_bootloader, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Event Handle">
    private void AttachCallback(boolean en)
    {
        if (en)
        {
            Main.netfinder.addDeviceFoundEventListener(this);
            Main.netfinder.addAssignResultEventListener(this);
            Main.netfinder.addUpdateResultEventListener(this);
            Main.netfinder.addUpdatePercentEventListener(this);
        }
        else
        {
            Main.netfinder.removeDeviceFoundEventListener(this);
            Main.netfinder.removeAssignResultEventListener(this);
            Main.netfinder.removeUpdateResultEventListener(this);
            Main.netfinder.removeUpdatePercentEventListener(this);
        }
    }

    public void DeviceFoundEvent(DeviceFoundEventArgs ev)
    {
        DeviceInfomation entry = ev.info;
        deviceListModel.addElement(entry);
        lbl_info.setText(Info_Select);
    }

    public void AssignResultEvent(AssignResultEventArgs ev)
    {
        switch (ev.result)
        {
            case Result.ACCEPTED:
                MessageBox.InfoShow("Assign completed");
                btn_clearActionPerformed(null);
                btn_startActionPerformed(null);
                break;
            case Result.REJECTED:
                MessageBox.ErrorShow("Assign rejected");
                break;
            case Result.UNKNOWN:
                MessageBox.ErrorShow("Assign fail");
                break;
            case Result.TIMEOUT:
                MessageBox.ErrorShow("Assign timeout");
                break;
        }
    }

    public void UpdatePercentEvent(UpdatePercentEventArgs ev)
    {
        progressDialog.UpdateProgressPercent(ev.percent);
    }

    public void UpdateResultEvent(UpdateResultEventArgs ev)
    {
        switch (ev.result)
        {
            case UpdateResult.SUCCESS:
                progressDialog.UpdateProgressResult("FW Update Success");
                btn_clearActionPerformed(null);
                btn_startActionPerformed(null);
                break;
            case UpdateResult.FAIL:
                progressDialog.UpdateProgressResult("FW Update Fail");
                break;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="UI Handle">
    private void btn_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectActionPerformed
        if (m_start) {
            m_start = false;
            Main.netfinder.Stop();
            btn_start.setBackground(Color.green);
            btn_start.setText("Search");
        }

        try {
            //Get subnet mask
            InetAddress localHost = Inet4Address.getLocalHost();
            NetworkInterface networkInterface = NetworkInterface.getByInetAddress(localHost);
            int maskLen = networkInterface.getInterfaceAddresses().get(0).getNetworkPrefixLength();
            byte[] mask = new byte[] {(byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff};
            for (int i = 0; i < 4; i++) {
                if (maskLen > 0) {
                    mask[i] = (byte)~(0xff >> maskLen);
                    maskLen -= 8;
                } else
                    mask[i] = 0;
            }

            selectedDeviceInfo = (DeviceInfomation)list_device.getSelectedValue();

            boolean sameSubnet = true;
            byte[] localip = localHost.getAddress();
            byte[] remoteip = selectedDeviceInfo.ip;
            for (int i = 0; i < 4; i++) {
                if ((localip[i] & mask[i]) != (remoteip[i] & mask[i])) {
                    sameSubnet = false;
                    break;
                }
            }

            sameSubnet = true;
            if (sameSubnet) {
                Main.ipAddress = Main.netfinder.GetIpName(selectedDeviceInfo.ip);
                Main.macAddress = Main.netfinder.GetMacName(selectedDeviceInfo.mac);

                new MainMenuFrame().setVisible(true);

                Close();
            } else {
                MessageBox.WarningShow("You are going to connect a device in different subnet.\nPlease assign CS203 IP in same subnet.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_btn_connectActionPerformed

    private void btn_assignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_assignmentActionPerformed
        if (m_start) {
            m_start = false;
            Main.netfinder.Stop();
            btn_start.setBackground(Color.green);
            btn_start.setText("Search");
        }
        if (Main.netfinder.GetOperation() != RecvOperation.IDLE) {
            MessageBox.WarningShow("Please stop searching device first.");
            return;
        }

        selectedDeviceInfo = (DeviceInfomation)list_device.getSelectedValue();

        new AssignmentDialog(null, true).setVisible(true);
        if (AssignOK) {
            Main.netfinder.AssignDevice(selectedDeviceInfo.mac,
                    selectedDeviceInfo.ip,
                    selectedDeviceInfo.device_name,
                    selectedDeviceInfo.tcptimeout,
                    selectedDeviceInfo.DHCP);
        }
}//GEN-LAST:event_btn_assignmentActionPerformed

    private void btn_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_imageActionPerformed
        if (m_start) {
            m_start = false;
            Main.netfinder.Stop();
            btn_start.setBackground(Color.green);
            btn_start.setText("Search");
        }

        selectedDeviceInfo = (DeviceInfomation)list_device.getSelectedValue();

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new MyFileFilter("img"));
        if(fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            Main.netfinder.AsyncUpdateImage(selectedDeviceInfo.ip, fc.getSelectedFile());
            progressDialog.setVisible(true);
        }
}//GEN-LAST:event_btn_imageActionPerformed

    private void btn_bootloaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bootloaderActionPerformed
        if (m_start) {
            m_start = false;
            Main.netfinder.Stop();
            btn_start.setBackground(Color.green);
            btn_start.setText("Search");
        }

        selectedDeviceInfo = (DeviceInfomation)list_device.getSelectedValue();

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new MyFileFilter("bin"));
        if(fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            Main.netfinder.AsyncUpdateBootloader(selectedDeviceInfo.ip, fc.getSelectedFile());
            progressDialog.setVisible(true);
        }
}//GEN-LAST:event_btn_bootloaderActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        lbl_info.setText(Info_Search);
        btn_connect.setEnabled(false);
        btn_assignment.setEnabled(false);
        btn_image.setEnabled(false);
        btn_bootloader.setEnabled(false);
        Main.netfinder.ClearDeviceList();
        deviceListModel.clear();
        Main.netfinder.ResearchDevice();
}//GEN-LAST:event_btn_clearActionPerformed

    private void list_deviceValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_deviceValueChanged
        if (list_device.getSelectedIndex() >= 0) {
            switch (((DeviceInfomation)list_device.getSelectedValue()).mode) {
                case Mode.Bootloader:
                    btn_connect.setEnabled(false);
                    btn_assignment.setEnabled(false);
                    btn_image.setEnabled(true);
                    btn_bootloader.setEnabled(false);
                    break;
                case Mode.Normal:
                    btn_connect.setEnabled(true);
                    btn_assignment.setEnabled(true);
                    btn_image.setEnabled(false);
                    btn_bootloader.setEnabled(true);
                    break;
            }
            lbl_info.setText(Info_Connect);
        } else {
            btn_connect.setEnabled(false);
            btn_assignment.setEnabled(false);
            btn_bootloader.setEnabled(false);
            btn_image.setEnabled(false);
        }
}//GEN-LAST:event_list_deviceValueChanged

    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        if (!m_start) {
            m_start = true;
            Main.netfinder.SearchDevice();
            btn_start.setBackground(Color.red);
            btn_start.setText("Stop");
        } else {
            m_start = false;
            Main.netfinder.Stop();
            btn_start.setBackground(Color.green);
            btn_start.setText("Search");
        }
        btn_connect.setEnabled(false);
        btn_assignment.setEnabled(false);
}//GEN-LAST:event_btn_startActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Close();
    }//GEN-LAST:event_formWindowClosing

    private void Close()
    {
        AttachCallback(false);
        Main.netfinder.Stop();
        Main.netfinder.ClearDeviceList();
        Main.netfinder.Dispose();
        progressDialog.dispose();
        dispose();
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="List Renderer">
    class ListRenderer extends JPanel implements ListCellRenderer {
        //private final JTextArea contentArea;
        private final JLabel device_name = new JLabel();
        private final JLabel description = new JLabel();
        private final JLabel IP_address = new JLabel();
        private final JLabel MAC_address = new JLabel();

        public ListRenderer() {
            setOpaque(true);

            device_name.setFont(new java.awt.Font("Arial", 1, 18));
            device_name.setText("");
            description.setText("");
            IP_address.setFont(new java.awt.Font("Arial", 1, 18));
            IP_address.setForeground(java.awt.Color.blue);
            IP_address.setText("IP Address:");
            MAC_address.setText("MAC Address:");

            javax.swing.GroupLayout ListItemLayout = new javax.swing.GroupLayout(this);
            setLayout(ListItemLayout);
            ListItemLayout.setHorizontalGroup(
                ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ListItemLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(device_name, 300, 300, 300)
                        .addComponent(description, 300, 300, 300))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                    .addGroup(ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(IP_address, 250, 250, 250)
                        .addComponent(MAC_address, 250, 250, 250)))
            );
            ListItemLayout.setVerticalGroup(
                ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ListItemLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(device_name)
                        .addComponent(IP_address))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(ListItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(description)
                        .addComponent(MAC_address))
                    .addContainerGap(15, Short.MAX_VALUE))
            );
        }

        public Component getListCellRendererComponent(
                                               JList list,
                                               Object value,
                                               int index,
                                               boolean isSelected,
                                               boolean cellHasFocus)
        {
            if (isSelected)
                setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, false));
            else
                setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, false));
            DeviceInfomation entry = (DeviceInfomation)value;
            setBackground(entry.mode == Mode.Normal ? Color.green : Color.yellow);
            device_name.setText(entry.device_name);
            description.setText(entry.description);
            IP_address.setText("IP Address: "+ Main.netfinder.GetIpName(entry.ip));
            MAC_address.setText("MAC Address: "+Main.netfinder.GetMacName(entry.mac));
            return this;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="File Filter">
    public class MyFileFilter extends javax.swing.filechooser.FileFilter
    {
        private String[] extensions;
        private String description;

        public MyFileFilter(String ext) {
            this (new String[] {ext}, null);
        }

        public MyFileFilter(String[] exts, String descr) {
            // Clone and lowercase the extensions
            extensions = new String[exts.length];
            for (int i = exts.length - 1; i >= 0; i--) {
                extensions[i] = exts[i].toLowerCase();
            }
            // Make sure we have a valid (if simplistic) description
            description = (descr == null ? exts[0] + " file" : descr);
        }


        public boolean accept(File file)
        {
            // We always allow directories, regardless of their extension
            if (file.isDirectory()) { return true; }
            for (String extension : extensions)
            {
                if (file.getName().toLowerCase().endsWith(extension))
                {
                return true;
                }
            }
            return false;
        }

        public String getDescription()
        {
            return description;
        }
    }
    // </editor-fold>

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NetFinderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_assignment;
    private javax.swing.JButton btn_bootloader;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_image;
    private javax.swing.JButton btn_start;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_info;
    private javax.swing.JList list_device;
    // End of variables declaration//GEN-END:variables

}
