package CS203JavaDemoApp;

import java.awt.*;
import javax.swing.table.*;
import CSLibrary.Events.*;
import CSLibrary.Constants.*;
import CSLibrary.Structures.*;
import CSLibrary.Text.*;
import CSLibrary.Tools.*;
import CSLibrary.Message.*;

/**
 *
 * @author gene.yeung
 */
public class TagReadWriteDialog extends javax.swing.JDialog implements StateChangedEventListener, AsyncCallbackEventListener, AccessCompletedEventListener{

    // <editor-fold defaultstate="collapsed" desc="Variable">
    private class Opts{
        final public static int UNKNOWN = -1;
        final public static int TAG_SEARCH = 0;
        final public static int TAG_READ = 1;
        final public static int TAG_WRITE = 2;
    }
    private int m_retry_cnt = 7;
    private int m_opt = Opts.UNKNOWN;
    private DefaultTableModel searchTableModel;
    private String selectedPC = "";
    private boolean m_read_done = false;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Init">
    /** Creates new form TagReadWriteDialog */
    public TagReadWriteDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //Center the dialog
        Dimension size = getSize();
        setLocation((Main.screen.width - size.width)/2, (Main.screen.height - size.height)/2);

        searchTableModel = (DefaultTableModel)table_search.getModel();
    }
    // </editor-fold>

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Panel_SelectTag = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_search = new javax.swing.JTable();
        btn_search = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        tf_selectedEPC = new javax.swing.JTextField();
        Panel_ReadAll = new javax.swing.JPanel();
        lbl_pcepctext = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btn_readall_read = new javax.swing.JButton();
        tf_readall_status = new javax.swing.JTextField();
        lbl_readall_pcepc = new javax.swing.JLabel();
        lbl_readall_accPwd = new javax.swing.JLabel();
        lbl_readall_killPwd = new javax.swing.JLabel();
        lbl_readall_tid = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_readall_offset = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tf_readall_count = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_readall_user = new javax.swing.JTextPane();
        tf_readall_accPwd = new javax.swing.JFormattedTextField();
        Panel_WriteAll = new javax.swing.JPanel();
        tf_writeall_count = new javax.swing.JTextField();
        tf_writeall_offset = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btn_writeall_write = new javax.swing.JButton();
        tf_writeall_status = new javax.swing.JTextField();
        tf_writeall_pc = new javax.swing.JTextField();
        tf_writeall_epc = new javax.swing.JTextField();
        tf_writeall_tid = new javax.swing.JTextField();
        chb_writeall_pc = new javax.swing.JCheckBox();
        chb_writeall_epc = new javax.swing.JCheckBox();
        chb_writeall_acc = new javax.swing.JCheckBox();
        chb_writeall_kill = new javax.swing.JCheckBox();
        chb_writeall_tid = new javax.swing.JCheckBox();
        chb_writeall_user = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta_writeall_user = new javax.swing.JTextPane();
        tf_writeall_accPwd = new javax.swing.JFormattedTextField();
        tf_writeall_acc = new javax.swing.JFormattedTextField();
        tf_writeall_kill = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Read/Write Tag");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(320, 232));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        Panel_SelectTag.setPreferredSize(new java.awt.Dimension(308, 186));

        table_search.setAutoCreateRowSorter(true);
        table_search.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        table_search.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PC", "EPC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_search.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_search.getTableHeader().setReorderingAllowed(false);
        table_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                table_searchMousePressed(evt);
            }
        });
        table_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                table_searchKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table_search);
        table_search.getColumnModel().getColumn(0).setPreferredWidth(40);
        table_search.getColumnModel().getColumn(1).setPreferredWidth(280);

        btn_search.setBackground(java.awt.Color.green);
        btn_search.setFont(new java.awt.Font("Arial", 0, 18));
        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_clear.setBackground(java.awt.Color.orange);
        btn_clear.setFont(new java.awt.Font("Arial", 0, 18));
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        tf_selectedEPC.setBackground(java.awt.Color.pink);
        tf_selectedEPC.setFont(new java.awt.Font("Arial", 0, 14));

        org.jdesktop.layout.GroupLayout Panel_SelectTagLayout = new org.jdesktop.layout.GroupLayout(Panel_SelectTag);
        Panel_SelectTag.setLayout(Panel_SelectTagLayout);
        Panel_SelectTagLayout.setHorizontalGroup(
            Panel_SelectTagLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Panel_SelectTagLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(btn_search)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btn_clear)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(tf_selectedEPC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        Panel_SelectTagLayout.setVerticalGroup(
            Panel_SelectTagLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, Panel_SelectTagLayout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Panel_SelectTagLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btn_search)
                    .add(btn_clear)
                    .add(tf_selectedEPC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Select Tag", Panel_SelectTag);

        Panel_ReadAll.setPreferredSize(new java.awt.Dimension(308, 202));

        lbl_pcepctext.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_pcepctext.setText("PC-EPC");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel1.setText("ACC PWD");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel2.setText("KILL PWD");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel3.setText("TID");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel4.setText("USER");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel5.setText("Access Password");

        btn_readall_read.setBackground(java.awt.Color.green);
        btn_readall_read.setFont(new java.awt.Font("Arial", 0, 18));
        btn_readall_read.setText("Read");
        btn_readall_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_readall_readActionPerformed(evt);
            }
        });

        tf_readall_status.setBackground(new java.awt.Color(255, 204, 153));
        tf_readall_status.setEditable(false);
        tf_readall_status.setFont(new java.awt.Font("Arial", 0, 18));
        tf_readall_status.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        lbl_readall_pcepc.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_readall_pcepc.setForeground(java.awt.Color.blue);
        lbl_readall_pcepc.setText("0000-000000000000000000000000");
        lbl_readall_pcepc.setToolTipText("");
        lbl_readall_pcepc.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        lbl_readall_accPwd.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_readall_accPwd.setForeground(java.awt.Color.red);
        lbl_readall_accPwd.setText("00000000");

        lbl_readall_killPwd.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_readall_killPwd.setForeground(java.awt.Color.red);
        lbl_readall_killPwd.setText("00000000");

        lbl_readall_tid.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_readall_tid.setForeground(java.awt.Color.red);
        lbl_readall_tid.setText("00000000");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel6.setText("Offset");

        tf_readall_offset.setFont(new java.awt.Font("Arial", 0, 18));
        tf_readall_offset.setText("0");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel7.setText("Count");

        tf_readall_count.setFont(new java.awt.Font("Arial", 0, 18));
        tf_readall_count.setText("1");

        ta_readall_user.setEditable(false);
        ta_readall_user.setFont(new java.awt.Font("Arial", 0, 18));
        jScrollPane2.setViewportView(ta_readall_user);

        tf_readall_accPwd.setBackground(java.awt.Color.pink);
        try {
            tf_readall_accPwd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tf_readall_accPwd.setText("00000000");
        tf_readall_accPwd.setFont(new java.awt.Font("Arial", 0, 18));

        org.jdesktop.layout.GroupLayout Panel_ReadAllLayout = new org.jdesktop.layout.GroupLayout(Panel_ReadAll);
        Panel_ReadAll.setLayout(Panel_ReadAllLayout);
        Panel_ReadAllLayout.setHorizontalGroup(
            Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Panel_ReadAllLayout.createSequentialGroup()
                .addContainerGap()
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Panel_ReadAllLayout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(Panel_ReadAllLayout.createSequentialGroup()
                        .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Panel_ReadAllLayout.createSequentialGroup()
                                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, lbl_pcepctext, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                                .add(18, 18, 18)
                                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(Panel_ReadAllLayout.createSequentialGroup()
                                        .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(Panel_ReadAllLayout.createSequentialGroup()
                                                .add(jLabel6)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                .add(tf_readall_offset, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                                            .add(lbl_readall_tid)
                                            .add(lbl_readall_killPwd)
                                            .add(lbl_readall_accPwd))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel7)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tf_readall_count, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(lbl_readall_pcepc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 294, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, Panel_ReadAllLayout.createSequentialGroup()
                                .add(btn_readall_read, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(tf_readall_accPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tf_readall_status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Panel_ReadAllLayout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .add(246, 246, 246))))
        );
        Panel_ReadAllLayout.setVerticalGroup(
            Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Panel_ReadAllLayout.createSequentialGroup()
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lbl_pcepctext)
                    .add(lbl_readall_pcepc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(lbl_readall_accPwd))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(lbl_readall_killPwd))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(lbl_readall_tid))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel6)
                    .add(tf_readall_offset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tf_readall_count, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(tf_readall_accPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(Panel_ReadAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btn_readall_read, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tf_readall_status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Read Tag", Panel_ReadAll);

        Panel_WriteAll.setPreferredSize(new java.awt.Dimension(308, 206));

        tf_writeall_count.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_count.setText("1");
        tf_writeall_count.setMargin(new java.awt.Insets(0, 1, 0, 1));

        tf_writeall_offset.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_offset.setText("0");
        tf_writeall_offset.setMargin(new java.awt.Insets(0, 1, 0, 1));

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel11.setText("Count");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel13.setText("Offset");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel15.setText("Access Password");

        btn_writeall_write.setBackground(java.awt.Color.green);
        btn_writeall_write.setFont(new java.awt.Font("Arial", 0, 18));
        btn_writeall_write.setText("Write");
        btn_writeall_write.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btn_writeall_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_writeall_writeActionPerformed(evt);
            }
        });

        tf_writeall_status.setBackground(new java.awt.Color(255, 204, 153));
        tf_writeall_status.setEditable(false);
        tf_writeall_status.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_status.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tf_writeall_status.setMargin(new java.awt.Insets(0, 1, 0, 1));

        tf_writeall_pc.setBackground(java.awt.Color.pink);
        tf_writeall_pc.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_pc.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tf_writeall_epc.setBackground(java.awt.Color.pink);
        tf_writeall_epc.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_epc.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tf_writeall_tid.setBackground(java.awt.Color.pink);
        tf_writeall_tid.setFont(new java.awt.Font("Arial", 0, 18));
        tf_writeall_tid.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        chb_writeall_pc.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_pc.setText("PC");
        chb_writeall_pc.setMargin(new java.awt.Insets(0, 2, 0, 2));

        chb_writeall_epc.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_epc.setText("EPC");
        chb_writeall_epc.setMargin(new java.awt.Insets(0, 2, 0, 2));

        chb_writeall_acc.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_acc.setText("ACC");
        chb_writeall_acc.setMargin(new java.awt.Insets(0, 2, 0, 2));

        chb_writeall_kill.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_kill.setText("KILL");
        chb_writeall_kill.setMargin(new java.awt.Insets(0, 2, 0, 2));

        chb_writeall_tid.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_tid.setText("TID");
        chb_writeall_tid.setEnabled(false);
        chb_writeall_tid.setMargin(new java.awt.Insets(0, 2, 0, 2));

        chb_writeall_user.setFont(new java.awt.Font("Arial", 0, 18));
        chb_writeall_user.setText("USER");
        chb_writeall_user.setMargin(new java.awt.Insets(0, 2, 0, 2));

        ta_writeall_user.setFont(new java.awt.Font("Arial", 0, 18));
        jScrollPane3.setViewportView(ta_writeall_user);

        tf_writeall_accPwd.setBackground(java.awt.Color.pink);
        try {
            tf_writeall_accPwd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tf_writeall_accPwd.setFont(new java.awt.Font("Arial", 0, 18));

        tf_writeall_acc.setBackground(java.awt.Color.pink);
        tf_writeall_acc.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        try {
            tf_writeall_acc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tf_writeall_acc.setText("00000000");
        tf_writeall_acc.setFont(new java.awt.Font("Arial", 0, 18));

        tf_writeall_kill.setBackground(java.awt.Color.pink);
        tf_writeall_kill.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        try {
            tf_writeall_kill.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tf_writeall_kill.setText("00000000");
        tf_writeall_kill.setFont(new java.awt.Font("Arial", 0, 18));

        org.jdesktop.layout.GroupLayout Panel_WriteAllLayout = new org.jdesktop.layout.GroupLayout(Panel_WriteAll);
        Panel_WriteAll.setLayout(Panel_WriteAllLayout);
        Panel_WriteAllLayout.setHorizontalGroup(
            Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, Panel_WriteAllLayout.createSequentialGroup()
                .addContainerGap()
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, Panel_WriteAllLayout.createSequentialGroup()
                        .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(btn_writeall_write, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tf_writeall_accPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tf_writeall_status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, Panel_WriteAllLayout.createSequentialGroup()
                        .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(chb_writeall_pc)
                            .add(chb_writeall_acc)
                            .add(chb_writeall_tid)
                            .add(chb_writeall_user)
                            .add(chb_writeall_epc))
                        .add(33, 33, 33)
                        .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tf_writeall_epc, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                            .add(Panel_WriteAllLayout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel13)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(tf_writeall_offset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel11)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tf_writeall_count, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                            .add(tf_writeall_pc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Panel_WriteAllLayout.createSequentialGroup()
                                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(tf_writeall_acc, 0, 0, Short.MAX_VALUE)
                                    .add(tf_writeall_tid, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                                .add(24, 24, 24)
                                .add(chb_writeall_kill)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tf_writeall_kill, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        Panel_WriteAllLayout.setVerticalGroup(
            Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Panel_WriteAllLayout.createSequentialGroup()
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tf_writeall_pc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chb_writeall_pc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tf_writeall_epc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chb_writeall_epc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chb_writeall_acc)
                    .add(chb_writeall_kill)
                    .add(tf_writeall_acc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tf_writeall_kill, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tf_writeall_tid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chb_writeall_tid))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tf_writeall_offset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(tf_writeall_count, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13)
                    .add(chb_writeall_user))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(tf_writeall_accPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 10, Short.MAX_VALUE)
                .add(Panel_WriteAllLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btn_writeall_write)
                    .add(tf_writeall_status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Write Tag", Panel_WriteAll);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Event Handle">
    private void AttachCallback(boolean en)
    {
        if (en)
        {
            Main.ReaderXP.addStateChangedEventListener(this);
            Main.ReaderXP.addAsyncCallbackEventListener(this);
            Main.ReaderXP.addTagAccessCompletedEventListener(this);
        }
        else
        {
            Main.ReaderXP.removeStateChangedEventListener(this);
            Main.ReaderXP.removeAsyncCallbackEventListener(this);
            Main.ReaderXP.removeTagAccessCompletedEventListener(this);
        }
    }

    //callback function
    public void StateChangedEvent(StateChangedEventArgs ev)
    {
        switch (ev.state)
        {
            case RFState.IDLE:
                SetSearchButtonState(false);
                switch (m_opt)
                {
                    case Opts.TAG_SEARCH:
                        break;
                }
                break;
            case RFState.BUSY:
                switch (m_opt)
                {
                    case Opts.TAG_SEARCH:
                        SetSearchButtonState(true);
                        break;
                }
                break;
            case RFState.STOPPING:
                break;
            case RFState.NOT_INITIALIZED:
                break;
        }
    }

    public void AsyncCallbackEvent(AsyncCallbackEventArgs ev)
    {
        if (ev.type == CallbackType.TAG_INVENTORY)
        {
            TagCallbackInfo record = ev.info;

            Object[] entry = new Object[] {record.pc.ToString(), record.epc.ToString()};
            searchTableModel.addRow(entry);
            Sound.Beep(2000, 10);
        }
    }

    public void TagAccessCompletedEvent(AccessCompletedEventArgs ev)
    {
        if (ev.access == TagAccess.READ)
        {
            switch (ev.bank)
            {
                case Bank.ACC_PWD:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Main.ReaderXP.GetOptions().TagReadAccPwd.password.ToString());
                    }
                    break;
                case Bank.EPC:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Main.ReaderXP.GetOptions().TagReadEPC.epc().ToString());
                    }
                    break;
                case Bank.KILL_PWD:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Main.ReaderXP.GetOptions().TagReadKillPwd.password.ToString());
                    }
                    break;
                case Bank.PC:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Main.ReaderXP.GetOptions().TagReadPC.pc.ToString());
                    }
                    break;
                case Bank.TID:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Main.ReaderXP.GetOptions().TagReadTid.tid().ToString());
                    }
                    break;
                case Bank.USER:
                    if (ev.success)
                    {
                        UpdateBankInfo(ev.bank, Hex.ToString(Main.ReaderXP.GetOptions().TagReadUser.pData));
                    }
                    break;
            }
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Other Handle">
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        AttachCallback(true);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (Main.ReaderXP.GetState() != RFState.IDLE)
        {
            Main.ReaderXP.StopOperation(true);
        }
        while(Main.ReaderXP.GetState() != RFState.IDLE)
        {
            try {
                Thread.sleep(100);
            }
            catch(InterruptedException e) {}
        }
        AttachCallback(false);
        evt.getWindow().dispose();
    }//GEN-LAST:event_formWindowClosing

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        if (Main.ReaderXP.GetState() == RFState.IDLE)
        {
            Clear(Opts.TAG_SEARCH);
            Start();
        }
        else
        {
            Stop();
        }
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        Clear(Opts.TAG_SEARCH);
    }//GEN-LAST:event_btn_clearActionPerformed

    private void table_searchKeyReleased(java.awt.event.KeyEvent evt)
    {//GEN-FIRST:event_table_searchKeyReleased
        table_searchMousePressed(null);
    }//GEN-LAST:event_table_searchKeyReleased

    private void table_searchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_searchMousePressed
        int i = table_search.getSelectedRow();
        tf_selectedEPC.setText(table_search.getValueAt(i, 1).toString());
        selectedPC = table_search.getValueAt(i, 0).toString();
        m_read_done = false;
        Clear(Opts.TAG_READ);
        Clear(Opts.TAG_WRITE);
    }//GEN-LAST:event_table_searchMousePressed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (Main.ReaderXP.GetState() != RFState.IDLE)
        {
            Main.ReaderXP.StopOperation(true);
        }
        int selected = jTabbedPane1.getSelectedIndex();
        m_opt = selected;
        if (selected != Opts.TAG_SEARCH && tf_selectedEPC.getText().equals(""))
        {
            MessageBox.ErrorShow("Please select or input a tag ID first.");
            jTabbedPane1.setSelectedIndex(0);
            return;
        }
        switch(selected)
        {
            case Opts.TAG_SEARCH:
                break;
            case Opts.TAG_READ:
                String text = selectedPC + "-" + tf_selectedEPC.getText();
                lbl_readall_pcepc.setText(text);
                lbl_readall_pcepc.setToolTipText(text);
                break;
            case Opts.TAG_WRITE:
                if (!m_read_done)
                {
                    MessageBox.ErrorShow("Please read a tag first");
                    jTabbedPane1.setSelectedIndex(1);
                }
                else
                {
                    tf_writeall_pc.setText(selectedPC);
                    tf_writeall_epc.setText(tf_selectedEPC.getText());
                    tf_writeall_acc.setText(lbl_readall_accPwd.getText());
                    tf_writeall_kill.setText(lbl_readall_killPwd.getText());
                    tf_writeall_tid.setText(lbl_readall_tid.getText());
                    ta_writeall_user.setText(ta_readall_user.getText());
                    tf_writeall_offset.setText(tf_readall_offset.getText());
                    tf_writeall_count.setText(tf_readall_count.getText());
                    tf_writeall_accPwd.setText(tf_readall_accPwd.getText());
                }
                break;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
    
    private void Start()
    {
        if (Main.ReaderXP.GetState() == RFState.IDLE)
        {
            m_opt = Opts.TAG_SEARCH;
            Main.ReaderXP.SetOperationMode(Settings.custInventory_continuous ? RadioOperationMode.CONTINUOUS : RadioOperationMode.NONCONTINUOUS);
            Main.ReaderXP.SetTagGroup(Settings.tagGroup);
            Main.ReaderXP.SetSingulationAlgorithmParms(Settings.singulation, Settings.GetSingulationAlg());

            Main.ReaderXP.GetOptions().TagInventory.flags = SelectFlags.ZERO;
            Main.ReaderXP.StartOperation(Operation.TAG_INVENTORY, Settings.custInventory_blocking_mode);
        }
    }
    private void Stop()
    {
        if (Main.ReaderXP.GetState() == RFState.BUSY)
        {
            Main.ReaderXP.StopOperation(true);
        }
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Read">
    private void btn_readall_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_readall_readActionPerformed
        if (Main.ReaderXP.GetState() == RFState.IDLE)
        {
            Clear(Opts.TAG_READ);

            m_opt = Opts.TAG_READ;

            btn_readall_read.setText("Stop");
            btn_readall_read.setBackground(java.awt.Color.red);

            Main.ReaderXP.GetOptions().TagSelected.flags = SelectMaskFlags.DISABLE_ALL;
            Main.ReaderXP.GetOptions().TagSelected.epcMask = new S_MASK(tf_selectedEPC.getText());
            Main.ReaderXP.GetOptions().TagSelected.epcMaskLength = Main.ReaderXP.GetOptions().TagSelected.epcMask.Length()*8;
            if (Main.ReaderXP.StartOperation(Operation.TAG_SELECTED, true) != Result.OK)
            {
                MessageBox.ErrorShow("Selected tag failed");
                btn_readall_read.setText("Read");
                btn_readall_read.setBackground(java.awt.Color.green);
                return;
            }

            {
                tf_readall_status.setText("Start reading PC");

                Main.ReaderXP.GetOptions().TagReadPC.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadPC.retryCount = m_retry_cnt;

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_PC, true) == Result.OK)
                {
                    
                }
                else
                {
                    //Read failed
                }
            }

            {
                tf_readall_status.setText("Start reading EPC");

                Main.ReaderXP.GetOptions().TagReadEPC.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadEPC.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagReadEPC.count = 6;

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_EPC, true) == Result.OK)
                {

                }
                else
                {
                    //Read failed
                }
            }

            {
                tf_readall_status.setText("Start reading access pwd");

                Main.ReaderXP.GetOptions().TagReadAccPwd.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadAccPwd.retryCount = m_retry_cnt;

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_ACC_PWD, true) == Result.OK)
                {
                    
                }
                else
                {
                    //Read failed
                }
            }

            {
                tf_readall_status.setText("Start reading kill pwd");

                Main.ReaderXP.GetOptions().TagReadKillPwd.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadKillPwd.retryCount = m_retry_cnt;

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_KILL_PWD, true) == Result.OK)
                {
                    
                }
                else
                {
                    //Read failed
                }
            }

            {
                tf_readall_status.setText("Start reading TID");

                Main.ReaderXP.GetOptions().TagReadTid.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadTid.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagReadTid.offset = 0;
                Main.ReaderXP.GetOptions().TagReadTid.count = 2;

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_TID, true) == Result.OK)
                {
                }
                else
                {
                    //Read failed
                }
            }

            {
                tf_readall_status.setText("Start reading user memory");

                Main.ReaderXP.GetOptions().TagReadUser.accessPassword = (int)Long.parseLong(tf_readall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagReadUser.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagReadUser.offset = Short.parseShort(tf_readall_offset.getText());
                Main.ReaderXP.GetOptions().TagReadUser.count = Short.parseShort(tf_readall_count.getText());

                if (Main.ReaderXP.StartOperation(Operation.TAG_READ_USER, true) == Result.OK)
                {
                }
                else
                {
                    //Read failed
                }
            }

            tf_readall_status.setText("Read done!!!");
            btn_readall_read.setText("Read");
            btn_readall_read.setBackground(java.awt.Color.green);

            m_read_done = true;
        }
        else
        {
            MessageBox.WarningShow("Reader is busy now, please try later.");
        }
    }//GEN-LAST:event_btn_readall_readActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Write">
    private void btn_writeall_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_writeall_writeActionPerformed
        if (Main.ReaderXP.GetState() == RFState.IDLE)
        {
            if (!(chb_writeall_pc.isSelected() |
                chb_writeall_epc.isSelected() |
                chb_writeall_acc.isSelected() |
                chb_writeall_kill.isSelected() |
                chb_writeall_tid.isSelected() |
                chb_writeall_user.isSelected()))
            {
                //All unchecked
                MessageBox.WarningShow("Please check at least one item to write");
                return;
            }

            m_opt = Opts.TAG_WRITE;

            btn_writeall_write.setText("Stop");
            btn_writeall_write.setBackground(java.awt.Color.red);

            Main.ReaderXP.GetOptions().TagSelected.flags = SelectMaskFlags.DISABLE_ALL;
            Main.ReaderXP.GetOptions().TagSelected.epcMask = new S_MASK(tf_selectedEPC.getText());
            Main.ReaderXP.GetOptions().TagSelected.epcMaskLength = Main.ReaderXP.GetOptions().TagSelected.epcMask.Length()*8;
            if (Main.ReaderXP.StartOperation(Operation.TAG_SELECTED, true) != Result.OK)
            {
                MessageBox.ErrorShow("Selected tag failed");
                return;
            }

            //if access bank is checked, write it.
            if (chb_writeall_acc.isSelected())
            {
                tf_writeall_status.setText("Start writing access pwd");

                Main.ReaderXP.GetOptions().TagWriteAccPwd.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagWriteAccPwd.accessPassword = (int)Long.parseLong(tf_writeall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagWriteAccPwd.password = (int)Long.parseLong(tf_writeall_acc.getText(), 16);

                if (Main.ReaderXP.StartOperation(Operation.TAG_WRITE_ACC_PWD, true) == Result.OK)
                {
                }
                else
                {
                    //Write failed
                    MessageBox.ErrorShow("Write AccPwd failed");
                }
            }

            //if kill bank is checked, write it.
            if (chb_writeall_kill.isSelected())
            {
                tf_writeall_status.setText("Start writing kill pwd");

                Main.ReaderXP.GetOptions().TagWriteKillPwd.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagWriteKillPwd.accessPassword = (int)Long.parseLong(tf_writeall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagWriteKillPwd.password = (int)Long.parseLong(tf_writeall_kill.getText(), 16);

                if (Main.ReaderXP.StartOperation(Operation.TAG_WRITE_KILL_PWD, true) == Result.OK)
                {
                }
                else
                {
                    //Write failed
                    MessageBox.ErrorShow("Write KillPwd failed");
                }
            }

            //if user bank is checked, write it.
            if (chb_writeall_user.isSelected())
            {
                tf_writeall_status.setText("Start writing user memory");

                Main.ReaderXP.GetOptions().TagWriteUser.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagWriteUser.accessPassword = (int)Long.parseLong(tf_writeall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagWriteUser.offset = Short.parseShort(tf_writeall_offset.getText());
                Main.ReaderXP.GetOptions().TagWriteUser.count = Short.parseShort(tf_writeall_count.getText());

                String data = ta_writeall_user.getText();
                if (data.length()/4 < Main.ReaderXP.GetOptions().TagWriteUser.count)
                {
                    MessageBox.ErrorShow("Length of user data is invalid");
                }
                else
                {
                    Main.ReaderXP.GetOptions().TagWriteUser.pData = Hex.ToCharArray(data);

                    if (Main.ReaderXP.StartOperation(Operation.TAG_WRITE_USER, true) == Result.OK)
                    {
                    }
                    else
                    {
                        //Write failed
                        MessageBox.ErrorShow("Write User Memory failed");
                    }
                }
            }

            if (chb_writeall_pc.isSelected())
            {
                tf_writeall_status.setText("Start writing PC");

                Main.ReaderXP.GetOptions().TagWritePC.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagWritePC.accessPassword = (int)Long.parseLong(tf_writeall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagWritePC.pc = Hex.ToShort(tf_writeall_pc.getText());

                if (Main.ReaderXP.StartOperation(Operation.TAG_WRITE_PC, true) == Result.OK)
                {
                    table_search.setValueAt(tf_writeall_pc.getText(), table_search.getSelectedRow(), 0);
                    selectedPC = tf_writeall_pc.getText();
                }
                else
                {
                    //Write failed
                    MessageBox.ErrorShow("Write PC failed");
                }
            }

            //Write EPC must put in last order to prevent it get lost
            if (chb_writeall_epc.isSelected())
            {
                tf_writeall_status.setText("Start writing EPC");

                Main.ReaderXP.GetOptions().TagWriteEPC.retryCount = m_retry_cnt;
                Main.ReaderXP.GetOptions().TagWriteEPC.accessPassword = (int)Long.parseLong(tf_writeall_accPwd.getText(), 16);
                Main.ReaderXP.GetOptions().TagWriteEPC.offset = 0;
                Main.ReaderXP.GetOptions().TagWriteEPC.count = Hex.GetWordLength(tf_writeall_epc.getText());
                Main.ReaderXP.GetOptions().TagWriteEPC.epc = new S_EPC(tf_writeall_epc.getText());

                if (Main.ReaderXP.StartOperation(Operation.TAG_WRITE_EPC, true) == Result.OK)
                {
                    table_search.setValueAt(tf_writeall_epc.getText(), table_search.getSelectedRow(), 1);
                    tf_selectedEPC.setText(tf_writeall_epc.getText());
                }
                else
                {
                    //Write failed
                    MessageBox.ErrorShow("Write EPC failed");
                }
            }

            tf_writeall_status.setText("Write done!!!");
            btn_writeall_write.setText("Write");
            btn_writeall_write.setBackground(java.awt.Color.green);
        }
        else
        {
            MessageBox.WarningShow("Reader is busy now, please try later.");
        }
    }//GEN-LAST:event_btn_writeall_writeActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="UI Update">
    private void Clear(int tab)
    {
        switch (tab)
        {
            case Opts.TAG_SEARCH:
                int len = searchTableModel.getRowCount();
                if (len > 0)
                {
                    for (int i = len-1; i >= 0; i--)
                        searchTableModel.removeRow(i);
                }
                tf_selectedEPC.setText("");
                break;
            case Opts.TAG_READ:
                lbl_readall_accPwd.setText("");
                lbl_readall_killPwd.setText("");
                lbl_readall_tid.setText("");
                ta_readall_user.setText("");
                tf_readall_status.setText("");
                break;
            case Opts.TAG_WRITE:
                break;
        }
    }
    private void SetSearchButtonState(boolean searching)
    {
        if (searching)
        {
            btn_search.setText("Stop");
            btn_search.setBackground(java.awt.Color.red);
            btn_clear.setEnabled(false);
        }
        else
        {
            btn_search.setText("Search");
            btn_search.setBackground(java.awt.Color.green);
            btn_clear.setEnabled(true);
        }
    }
    private void UpdateBankInfo(int bank, String info)
    {

        switch (bank)
        {
            case Bank.PC:
                break;
            case Bank.EPC:
                break;
            case Bank.ACC_PWD:
                lbl_readall_accPwd.setText(info);
                break;
            case Bank.KILL_PWD:
                lbl_readall_killPwd.setText(info);
                break;
            case Bank.TID:
                lbl_readall_tid.setText(info);
                break;
            case Bank.USER:
                ta_readall_user.setText(info);
                break;
        }
    }
    // </editor-fold>

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TagReadWriteDialog dialog = new TagReadWriteDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel_ReadAll;
    private javax.swing.JPanel Panel_SelectTag;
    private javax.swing.JPanel Panel_WriteAll;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_readall_read;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_writeall_write;
    private javax.swing.JCheckBox chb_writeall_acc;
    private javax.swing.JCheckBox chb_writeall_epc;
    private javax.swing.JCheckBox chb_writeall_kill;
    private javax.swing.JCheckBox chb_writeall_pc;
    private javax.swing.JCheckBox chb_writeall_tid;
    private javax.swing.JCheckBox chb_writeall_user;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_pcepctext;
    private javax.swing.JLabel lbl_readall_accPwd;
    private javax.swing.JLabel lbl_readall_killPwd;
    private javax.swing.JLabel lbl_readall_pcepc;
    private javax.swing.JLabel lbl_readall_tid;
    private javax.swing.JTextPane ta_readall_user;
    private javax.swing.JTextPane ta_writeall_user;
    private javax.swing.JTable table_search;
    private javax.swing.JFormattedTextField tf_readall_accPwd;
    private javax.swing.JTextField tf_readall_count;
    private javax.swing.JTextField tf_readall_offset;
    private javax.swing.JTextField tf_readall_status;
    private javax.swing.JTextField tf_selectedEPC;
    private javax.swing.JFormattedTextField tf_writeall_acc;
    private javax.swing.JFormattedTextField tf_writeall_accPwd;
    private javax.swing.JTextField tf_writeall_count;
    private javax.swing.JTextField tf_writeall_epc;
    private javax.swing.JFormattedTextField tf_writeall_kill;
    private javax.swing.JTextField tf_writeall_offset;
    private javax.swing.JTextField tf_writeall_pc;
    private javax.swing.JTextField tf_writeall_status;
    private javax.swing.JTextField tf_writeall_tid;
    // End of variables declaration//GEN-END:variables

}
