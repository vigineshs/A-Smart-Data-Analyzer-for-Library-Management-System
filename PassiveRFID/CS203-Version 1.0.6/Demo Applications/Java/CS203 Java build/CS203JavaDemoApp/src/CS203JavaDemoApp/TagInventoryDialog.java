package CS203JavaDemoApp;

import java.util.*;
import java.awt.*;
import java.util.Collections;
import javax.swing.table.*;
import CSLibrary.Events.*;
import CSLibrary.Constants.*;
import CSLibrary.Structures.*;
import CSLibrary.Tools.*;
import CSLibrary.Message.*;

public class TagInventoryDialog extends javax.swing.JDialog implements StateChangedEventListener, AsyncCallbackEventListener{

    // <editor-fold defaultstate="collapsed" desc="Variable">
    private class ButtonState{
        final public static int Start = 0;
        final public static int Stop = 1;
        final public static int Unknown = 2;
    }
    private Thread reset;
    private java.util.Timer timer = null;
    private int m_tagRate = 0;
    private int m_totaltag = 0;
    private int m_tagCount = 0;
    private DefaultTableModel inventoryTableModel;
    private int startButtonState = ButtonState.Unknown;
    private ArrayList InventoryListItems = new ArrayList();
    private boolean togglePressed = false;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Init">
    /** Creates new form TagInventoryDialog */
    public TagInventoryDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //Center the dialog
        Dimension size = getSize();
        setLocation((Main.screen.width - size.width)/2, (Main.screen.height - size.height)/2);

        inventoryTableModel = (DefaultTableModel)table_inventory.getModel();
    }
    // </editor-fold>

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_start = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_inventory = new javax.swing.JTable();
        btn_clear = new javax.swing.JButton();
        lbl_tagrate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Inventory");
        setBackground(java.awt.SystemColor.info);
        setBounds(new java.awt.Rectangle(0, 0, 320, 240));
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btn_start.setBackground(new java.awt.Color(0, 192, 0));
        btn_start.setFont(new java.awt.Font("Arial", 0, 18));
        btn_start.setText("Start");
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        table_inventory.setAutoCreateRowSorter(true);
        table_inventory.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        table_inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "PC", "EPC", "RSSI", "Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_inventory.setRowHeight(25);
        table_inventory.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table_inventory);
        table_inventory.getColumnModel().getColumn(0).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(1).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(2).setPreferredWidth(400);
        table_inventory.getColumnModel().getColumn(3).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(4).setPreferredWidth(40);

        btn_clear.setBackground(java.awt.Color.cyan);
        btn_clear.setFont(new java.awt.Font("Arial", 0, 18));
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        lbl_tagrate.setFont(new java.awt.Font("Arial", 0, 18));
        lbl_tagrate.setText("0 tag/s");
        lbl_tagrate.setInheritsPopupMenu(false);
        lbl_tagrate.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18));
        jLabel1.setText("Tag Rate:");
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setOpaque(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btn_start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btn_clear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lbl_tagrate)
                .addContainerGap(309, Short.MAX_VALUE))
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 366, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btn_start)
                    .add(btn_clear)
                    .add(jLabel1)
                    .add(lbl_tagrate))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // <editor-fold defaultstate="collapsed" desc="Event Handle">
    private void AttachCallback(boolean en)
    {
        if (en)
        {
            Main.ReaderXP.addStateChangedEventListener(this);
            Main.ReaderXP.addAsyncCallbackEventListener(this);
        }
        else
        {
            Main.ReaderXP.removeStateChangedEventListener(this);
            Main.ReaderXP.removeAsyncCallbackEventListener(this);
        }
    }

    class ResetThread implements Runnable
    {
        private int rc = Result.OK;

        ResetThread() {
        }

        public void run() {
            SetStartButtonState(ButtonState.Stop);
            ResetDialog dialog = new ResetDialog(null, false);
            dialog.setVisible(true);
            if ((rc = Main.ReaderXP.Reconnect()) == Result.OK)
            {
                //Start inventory
                Start();
            }
            else
            {
                MessageBox.ErrorShow(String.format("ResetReader fail rc = %d", rc));
                SetStartButtonState(ButtonState.Start);
            }
            dialog.dispose();
        }
    }

    public void StateChangedEvent(StateChangedEventArgs ev)
    {
        switch (ev.state)
        {
            case RFState.IDLE:
                timer.cancel();
                btn_start.setEnabled(true);
                SetStartButtonState(ButtonState.Start);
                //Check whether fail
                if (Main.ReaderXP.LastResultCode() == Result.NETWORK_RESET)
                {
                    //Use other thread to create progress
                    reset = new Thread(new ResetThread());
                    reset.start();
                }
                break;
            case RFState.BUSY:
                SetStartButtonState(ButtonState.Stop);
                break;
            case RFState.STOPPING:
                btn_start.setEnabled(false);
                break;
            case RFState.NOT_INITIALIZED:
                break;
        }
    }

    public void AsyncCallbackEvent(AsyncCallbackEventArgs ev)
    {
        if (ev.type == CallbackType.TAG_RANGING)
        {
            TagCallbackInfo record = ev.info;

            ++m_totaltag;

            int index = Collections.binarySearch(InventoryListItems, ev.info);
            if (index > -1)
            {
                //found a record
                TagCallbackInfo found = ((TagCallbackInfo)InventoryListItems.get(index));
                ++found.count;
                found.rssi = record.rssi;

                int rows = inventoryTableModel.getRowCount();
                for(int i=0;i<rows;i++)
                {
                    String value = inventoryTableModel.getValueAt(i, 0).toString();
                    if(value.equals(Integer.toString(found.index)))
                    {
                        table_inventory.setValueAt(new Float(found.rssi), i, 3);
                        table_inventory.setValueAt(new Integer(found.count), i, 4);
                    }
                }
            }
            else
            {
                m_tagCount = record.index = InventoryListItems.size();
                InventoryListItems.add(record);
                Object[] entry = new Object[] {new Integer(record.index), record.pc.ToString(), record.epc.ToString(), new Float(record.rssi), new Integer(record.count)};
                inventoryTableModel.addRow(entry);
                Collections.sort(InventoryListItems);
                Sound.Beep(2000, 10);
            }
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="UI Handle">
    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        if (Main.ReaderXP.GetState() == RFState.IDLE && startButtonState == ButtonState.Start)
        {
            Start();
        }
        else if (Main.ReaderXP.GetState() == RFState.BUSY && startButtonState == ButtonState.Stop)
        {
            Stop();
        }
    }//GEN-LAST:event_btn_startActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (Main.ReaderXP.GetState() != RFState.IDLE)
        {
            Main.ReaderXP.StopOperation(true);
        }
        while(Main.ReaderXP.GetState() != RFState.IDLE)
        {
            try {
                Thread.sleep(100);
            }
            catch(InterruptedException e) {}
        }
        AttachCallback(false);
        evt.getWindow().dispose();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        SetStartButtonState(ButtonState.Start);
        AttachCallback(true);
    }//GEN-LAST:event_formWindowOpened

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        int len = inventoryTableModel.getRowCount();
        if (len > 0)
        {
            for (int i = len-1; i >= 0; i--)
                inventoryTableModel.removeRow(i);
        }
        InventoryListItems.clear();
        m_tagCount = 0;
    }//GEN-LAST:event_btn_clearActionPerformed

    private void Start()
    {
        if (Main.ReaderXP.GetState() == RFState.IDLE)
        {
            timer = new java.util.Timer();
            timer.schedule(new TagRateTask(), 10, 1000);

            Main.ReaderXP.SetOperationMode(Settings.custInventory_continuous ? RadioOperationMode.CONTINUOUS : RadioOperationMode.NONCONTINUOUS);
            Main.ReaderXP.SetTagGroup(Settings.tagGroup);
            Main.ReaderXP.SetSingulationAlgorithmParms(Settings.singulation, Settings.GetSingulationAlg());
            
            Main.ReaderXP.GetOptions().TagInventory.flags = SelectFlags.ZERO;
            Main.ReaderXP.StartOperation(Operation.TAG_RANGING, Settings.custInventory_blocking_mode);
        }
    }

    private void Stop()
    {
        if (Main.ReaderXP.GetState() == RFState.BUSY)
        {
            timer.cancel();
            Main.ReaderXP.StopOperation(true);
        }
    }

    private void SetStartButtonState(int state)
    {
        if (state == startButtonState)
            return;
        switch (state)
        {
            case ButtonState.Stop:
                startButtonState = ButtonState.Stop;
                btn_start.setText("Stop");
                btn_start.setBackground(java.awt.Color.red);
                btn_clear.setEnabled(false);
                break;
            case ButtonState.Start:
                startButtonState = ButtonState.Start;
                btn_start.setText("Start");
                btn_start.setBackground(new java.awt.Color(0, 192, 0));
                btn_clear.setEnabled(true);
                break;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Timer Task">
    public class TagRateTask extends TimerTask {
        public void run() {
            m_tagRate = m_totaltag;
            lbl_tagrate.setText(Integer.toString(m_tagRate)+" tag/s");
            m_totaltag = 0;
        }
    }
    // </editor-fold>

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TagInventoryDialog dialog = new TagInventoryDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_tagrate;
    private javax.swing.JTable table_inventory;
    // End of variables declaration//GEN-END:variables

}
